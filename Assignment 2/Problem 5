#include <iostream>
#include <string>
#include <queue>
using namespace std;

struct node {
    char data;
    unsigned freq;
    node* left;
    node* right;

    node(char data, unsigned freq) {
        left = right = nullptr;
        this->data = data;
        this->freq = freq;
    }
};

struct compare {
  
    bool operator()(node* left, node* right) {
        return (left->freq > right->freq);
    }
};

void printCode(struct node* root, string str) {

    if (!root) {
        return;
    }

    if (root->data != '$') {
        cout << root->data << ": " << str << "\n";
    }

    printCode(root->left, str + "0");
    printCode(root->right, str + "1");
}

void huffmanCode(char data[], int freq[], int size) {
    struct node* left;
    struct node* right;
    struct node* top;

    struct priority_queue<node*, vector<node*>, compare> minHeap;

    for (int i = 0; i < size; i++) {
        minHeap.push(new node(data[i], freq[i]));
    }

    while (minHeap.size() != 1) {
        left = minHeap.top();
        minHeap.pop();

        right = minHeap.top();
        minHeap.pop();

        top = new node('$', left->freq + right->freq);

        top->left = left;
        top->right = right;
        
        minHeap.push(top);
        printCode(minHeap.top(), "");
    }
}

int main() {

    char c;
    int num;
    int arraySize = 0;
    cout << "Enter array size: ";
    cin >> arraySize;

    char* data = new char[arraySize];
    int* freq = new int[arraySize];

    for (int i = 0; i < arraySize; i++) {
        cout << "Input character: ";
        cin >> c;
        data[i] = c;
        
        cout << "Input corresponding frequency: ";
        cin >> num;
        freq[i] = num;
    }

    huffmanCode(data, freq, arraySize);

    return 0;
}
